type User @model
@auth(rules: [
  { allow: owner, operations: [read, update] },  
  { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] },  
  { allow: private, operations: [create] }  
]) {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String  # Optional phone number for User
  state: String!
  profilePictureUrl: String  # URL for profile picture
  heroImageUrl: String  # URL for hero image
  clubs: [Membership] @hasMany(indexName: "byUser", fields: ["id"])  # Many-to-many relationship through Membership
  posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])  # Relationship to posts
  catchReports: [CatchReport] @hasMany(indexName: "byUser", fields: ["id"])  # Relationship to catch reports
}

type Post @model {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])  # Foreign key for User
  user: User @belongsTo(fields: ["userID"])  # Relationship with User
  content: String!  # Post content or announcement
  imageUrl: String  # Optional URL for attached image
  createdAt: AWSDateTime!  # Timestamp of the post
}

type CatchReport @model {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])  # Foreign key for User
  user: User @belongsTo(fields: ["userID"])  # Relationship with User
  fishType: String!
  weight: Float  # Weight of the catch
  location: String!
  imageUrl: String  # Optional URL for the catch image
  createdAt: AWSDateTime!
}



type Club @model
@auth(rules: [
  { allow: owner, operations: [create, update, delete] },  
  { allow: groups, groups: ["Admin"], operations: [create, update, delete] },  
  { allow: private, operations: [read] }
]) {
  id: ID!
  name: String!
  state: String!
  cityArea: String!
  contactEmail: String!
  phoneNumber: String
  description: String
  rules: String
  memberLimit: Int
  logoUrl: String  # URL for club logo
  additionalImages: [String]  # Array of URLs for additional club images
  bannerImageUrl: String  # Optional club banner image URL
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  memberships: [Membership] @hasMany(indexName: "byClub", fields: ["id"])
  tournaments: [Tournament] @hasMany(indexName: "byClub", fields: ["id"])
}

type Membership @model @auth(rules: [
  { allow: owner, operations: [create, update, delete, read] },
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] },
  { allow: private, operations: [read]}  
]) {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  user: User @belongsTo(fields: ["userID"])
  clubID: ID! @index(name: "byClub", sortKeyFields: ["id"])
  club: Club @belongsTo(fields: ["clubID"])
  dateJoined: AWSDate!
  phoneNumber: String
  clubProfilePictureUrl: String  # Optional club-specific profile picture for the member
}

type Lake @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  state: String!
  description: String
  images: [String]  # Array of URLs for lake images
  boatRamps: [BoatRamp] @hasMany(indexName: "byLakeBoatRamp", fields: ["id"])
  tournamentLakes: [TournamentLake] @hasMany(indexName: "byLake", fields: ["id"])
}

type BoatRamp @model
@auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  location: String!
  street: String!
  city: String!
  state: String!
  zipCode: String!
  description: String!
  images: [String]  # Array of URLs for boat ramp images
  lakeID: ID! @index(name: "byLakeBoatRamp")
  lake: Lake @belongsTo(fields: ["lakeID"])
  tournamentLakeBoatRamps: [TournamentLakeBoatRamp] @hasMany(indexName: "byBoatRamp", fields: ["id"])
}

type Tournament @model 
@auth(rules: [
  { allow: owner, operations: [create, update, delete] },  
  { allow: groups, groups: ["Admin"], operations: [create, update, delete] },  
  { allow: private, operations: [read] }
]) {
  id: ID!
  name: String!
  date: AWSDate!
  startTime: AWSTime!
  endTime: AWSTime!
  description: String
  cost: Float
  state: String!
  location: String!
  phoneNumber: String
  logoUrl: String  # URL for tournament logo
  bannerImageUrl: String  # Optional tournament banner image URL
  gallery: [String]  # Array of URLs for tournament gallery images
  clubID: ID @index(name: "byClub")
  club: Club @belongsTo(fields: ["clubID"])
  clubName: String
  userID: ID!
  tournamentLakes: [TournamentLake] @hasMany(indexName: "byTournament", fields: ["id"])
}

type TournamentLake @model {
  id: ID!
  tournamentID: ID! @index(name: "byTournament", sortKeyFields: ["id"])
  tournament: Tournament @belongsTo(fields: ["tournamentID"])
  lakeID: ID! @index(name: "byLake", sortKeyFields: ["id"])
  lake: Lake @belongsTo(fields: ["lakeID"])
  allowAllRamps: Boolean!
  tournamentLakeBoatRamps: [TournamentLakeBoatRamp] @hasMany(indexName: "byTournamentLake", fields: ["id"])
}

type TournamentLakeBoatRamp @model {
  id: ID!
  tournamentLakeID: ID! @index(name: "byTournamentLake", sortKeyFields: ["id"])
  tournamentLake: TournamentLake @belongsTo(fields: ["tournamentLakeID"])
  boatRampID: ID! @index(name: "byBoatRamp", sortKeyFields: ["id"])
  boatRamp: BoatRamp @belongsTo(fields: ["boatRampID"])
}



# New Type: Event for event flyers or promotional material
type Event @model {
  id: ID!
  name: String!
  description: String
  date: AWSDate!
  imageUrl: String  # Optional promotional flyer or event image
  createdAt: AWSDateTime!
}






















