type User @model 
@auth(rules: [
  { allow: owner, operations: [read, update] }, 
  { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] }, 
  { allow: private, operations: [create] }
]) {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String
  state: String!
  profilePictureUrl: String
  heroImageUrl: String
  clubs: [Membership] @hasMany  # Removed fields for seed compatibility
  posts: [Post] @hasMany
  catchReports: [CatchReport] @hasMany
}

type Post @model 
@auth(rules: [
  { allow: private }
]) {
  id: ID!
  userID: ID!
  user: User @belongsTo(fields: ["userID"])
  content: String!
  imageUrl: String
  createdAt: AWSDateTime!
}

type CatchReport @model 
@auth(rules: [
  { allow: private }
]) {
  id: ID!
  userID: ID!
  user: User @belongsTo(fields: ["userID"])
  fishType: String!
  weight: Float
  location: String!
  imageUrl: String
  createdAt: AWSDateTime!
}

type Club @model 
@auth(rules: [
  { allow: owner, operations: [create, update, delete] }, 
  { allow: groups, groups: ["Admin"], operations: [create, update, delete] }, 
  { allow: private, operations: [read] }
]) {
  id: ID!
  name: String!
  state: String!
  cityArea: String!
  contactEmail: String!
  phoneNumber: String
  description: String
  rules: String
  memberLimit: Int
  logoUrl: String
  additionalImages: [String]
  bannerImageUrl: String
  userID: ID!
  memberships: [Membership] @hasMany
  tournaments: [Tournament] @hasMany
}

type Membership @model 
@auth(rules: [
  { allow: owner, operations: [create, update, delete, read] }, 
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }, 
  { allow: private, operations: [read] }
]) {
  id: ID!
  userID: ID!
  user: User @belongsTo(fields: ["userID"])
  clubID: ID!
  club: Club @belongsTo(fields: ["clubID"])
  dateJoined: AWSDate!
  phoneNumber: String
  clubProfilePictureUrl: String
}

type Lake @model 
@auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  state: String!
  description: String
  images: [String]
  boatRamps: [BoatRamp] @hasMany
  tournamentLakes: [TournamentLake] @hasMany
}

type BoatRamp @model 
@auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  location: String!
  street: String!
  city: String!
  state: String!
  zipCode: String!
  description: String!
  images: [String]
  lakeID: ID!
  lake: Lake @belongsTo(fields: ["lakeID"])
  tournamentLakeBoatRamps: [TournamentLakeBoatRamp] @hasMany
}

type Tournament @model 
@auth(rules: [
  { allow: owner, operations: [create, update, delete] }, 
  { allow: groups, groups: ["Admin"], operations: [create, update, delete] }, 
  { allow: private, operations: [read] }  # Allow all users to read tournaments
]) {
  id: ID!
  name: String!
  date: AWSDate!
  startTime: AWSTime!
  endTime: AWSTime!
  description: String
  cost: Float
  state: String!
  location: String!
  phoneNumber: String
  logoUrl: String
  bannerImageUrl: String
  gallery: [String]
  clubID: ID  # This is now optional for non-club tournaments
  club: Club @belongsTo(fields: ["clubID"])  # Nullable association
  clubName: String
  userID: ID!  # User who created the tournament
  isPublic: Boolean!  # New field to flag public tournaments
  tournamentLakes: [TournamentLake] @hasMany
}


type TournamentLake @model 
@auth(rules: [
  { allow: private }
]) {
  id: ID!
  tournamentID: ID!
  tournament: Tournament @belongsTo(fields: ["tournamentID"])
  lakeID: ID!
  lake: Lake @belongsTo(fields: ["lakeID"])
  allowAllRamps: Boolean!
  tournamentLakeBoatRamps: [TournamentLakeBoatRamp] @hasMany
}

type TournamentLakeBoatRamp @model 
@auth(rules: [
  { allow: private }
]) {
  id: ID!
  tournamentLakeID: ID!
  tournamentLake: TournamentLake @belongsTo(fields: ["tournamentLakeID"])
  boatRampID: ID!
  boatRamp: BoatRamp @belongsTo(fields: ["boatRampID"])
}

type Event @model 
@auth(rules: [
  { allow: private }
]) {
  id: ID!
  name: String!
  description: String
  date: AWSDate!
  imageUrl: String
  createdAt: AWSDateTime!
}
